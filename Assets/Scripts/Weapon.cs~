using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Weapon : MonoBehaviour
{
    // Weapon settings
    private float reloadTime = 0.5f;
    private float lastFireTime = 0;
    public int minDamage = 1;
    public int maxDamage = 100;
    public float weaponRange = 1.5f;

    // Targeting settings
    public float scanRange = 8f;

    // return true if target defeated.
    public bool FireWeapon(GameObject target)
    {
        if (Time.time > lastFireTime + reloadTime)
        {
            if (target != null)
            {
                float damage = Random.Range(minDamage, maxDamage);
                string targetName = target.name;
                if (target.GetComponent<HealthTracker>().TakeDamage(damage))
                {
                    return true;
                }
            }
        }
        return false;
    }

    public GameObject FindTarget(List<string> scanLayers)
    {
        Collider2D[] enemies;

        // Search in a loop, rather than combine all layers into one mask,
        // since we want to find high-priority targets first.
        foreach (string scanLayer in scanLayers)
        {
            enemies = Physics2D.OverlapCircleAll(
                transform.position, scanRange, LayerMask.GetMask(scanLayer));
            if (enemies.Length > 0)
            {
                // Randomly select amongst the available targets, to prevent
                // ships from all ganging up on one.
                int selectedEnemy = Random.Range(0, enemies.Length - 1);
                return enemies[selectedEnemy].gameObject;
            }
        }
        return null;
    }

    // Helper routine to check if an object is a valid target
    public bool IsTarget(List<string> scanLayers, GameObject target)
    {
        foreach (string targetType in scanLayers)
        {
            if (target.layer == LayerMask.NameToLayer(targetType))
            {
                return true;
            }
        }
        return false;
    }

}
