using System.Collections.Generic;
using UnityEngine;

// Common movement routine for all of player's launched ships.
public class ShipMove : MonoBehaviour
{
    public GameObject Carrier = null;
    public float BuildCost = 1000f;
    public string ScanLayer = null;
    // Return to this position when on patrol
    public GameObject patrolLocation = null;
    public bool shouldOrbit = false;

    // For targeting
    private GameObject target = null;
    // Enemy type
    private List<string> scanLayers = new List<string>();

    // State
    enum TrackingState { Launching, Patrolling, Hunting };
    private TrackingState trackingState = TrackingState.Launching;

    // For movement
    private Rigidbody2D rb2D;
    public float maxSpeed = 1;
    private float decel = 0.1f;
    private float thrust = 16f;
    
    // Weapon settings
    private Weapon weaponComponent = null;

    // Used to orbit carrier when patrolling
    private Orbit orbitComponent = null;
 
    // Start is called before the first frame update
    void Start()
    {
        orbitComponent = GetComponent<Orbit>();
        weaponComponent = GetComponent<Weapon>();
        rb2D = GetComponent<Rigidbody2D>();
        target = patrolLocation;
        trackingState = TrackingState.Launching;
        Debug.Log(name + " launching...");
        if (shouldOrbit)
        {
            orbitComponent.InitializeOrbit(Carrier, patrolLocation);
        }
        scanLayers.Add(ScanLayer);
    }

    void FixedUpdate()
    {
        Vector3 targetPosition;

        if (Carrier == null)
        {
            Destroy(gameObject);
            return;
        }
        if ((target == null) || (target.gameObject.layer == LayerMask.NameToLayer("Captured")))
        {
            target = patrolLocation;
            trackingState = TrackingState.Patrolling;
            Debug.Log(name + " patrolling...");
        }
        if (trackingState == TrackingState.Patrolling)
        {
            target = weaponComponent.FindTarget(scanLayers);
            if (target != null)
            {
                trackingState = TrackingState.Hunting;
                Debug.Log(name + " hunting " + target.name);
            }

        }
        if (trackingState == TrackingState.Patrolling)
        {
            if (shouldOrbit)
            {
                targetPosition = orbitComponent.GetOrbitPosition();
            }
            else
            {
                targetPosition = patrolLocation.transform.position;
            }
        }
        else
        {
            targetPosition = target.transform.position;
        }
        Vector3 forceDirection = new Vector3(0f, 0f, 0f);
        Vector3 deltaPosition = targetPosition - transform.position;

        if (Vector3.Magnitude(deltaPosition) < weaponComponent.weaponRange)
        {
            if (trackingState == TrackingState.Hunting)
            {
                string targetName = target.name;
                if (weaponComponent.FireWeapon(target))
                {
                    // Destroyed or captured
                    if (targetName.StartsWith("City"))
                    {
                        Debug.Log(name + " captured " + targetName);
                        Carrier.GetComponent<ResourceTracker>().AddEnergy(1f);
                        Carrier.GetComponent<ResourceTracker>().AddResources(5000f);
                    }
                    else
                    {
                        Debug.Log(name + " destroyed " + targetName);
                    }
                    target = null;
                }
                if (target == null)
                {
                    target = patrolLocation;
                    trackingState = TrackingState.Patrolling;
                    Debug.Log(name + " patrolling...");
                }
            }
        }
        if (Vector3.Magnitude(deltaPosition) < 0.5f)
        {
            if (trackingState == TrackingState.Launching)
            {
                trackingState = TrackingState.Patrolling;
                Debug.Log(name + "reached patrol location, patroling...");
            }
        }

        if (Vector3.Magnitude(deltaPosition) > 0.3f)
        {
            forceDirection += Vector3.Normalize(deltaPosition);
        }

        if (forceDirection == Vector3.zero)
        {
            rb2D.velocity *= decel;
        }
        else
        {
            // Add Force
            rb2D.AddForce(Vector3.Normalize(forceDirection) * thrust);
        }

        // Limit velocity
        rb2D.velocity = Vector2.ClampMagnitude(rb2D.velocity, maxSpeed);

        transform.rotation = Quaternion.LookRotation(Vector3.forward, deltaPosition);

        // Bounds check
        if (transform.position.magnitude > 36f)
        {
            transform.position = Vector3.ClampMagnitude(transform.position, 36f);
        }
    }
}
